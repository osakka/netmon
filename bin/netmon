#!/bin/bash
### netmon - Network Monitor: network monitoring tool.
### by Omar Al-Sakka
### !/bin/bash -x For trace during runtime.
###
### Please refer to the man page in section (8) for more details.
### In no place in this script has stdout/stderr been redirected to a log
### file or null device.  This is to ensure a clean runtime throughout.
###
### Copyright © 2001 Omar Al-Sakka.  This is free software.  There is  NO
### warranty;  not  even  for  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
### Copying of this code is prohibited.  Authorisation from the author IS
### required before the use of any code-snippets... 

### Global Variables.
declare -r base_dir="/opt/netmon";
# --------
declare -r var_dir="$base_dir/var";
declare -r log_dir="$var_dir/log";
declare -r tmp_dir="$var_dir/tmp";
declare -r run_dir="$var_dir/run";
declare -r startup="$var_dir/svd";
declare -r config_dir="$var_dir/cfg";
# --------
declare -r src_dir="$base_dir/share";
declare -r cmd_dir="$src_dir/commands";
declare -r ftr_dir="$src_dir/features";
declare -r std_dir="$src_dir/misc";
declare -r PATH="$cmd_dir";
### INTERNALs.
declare -r MAX_RECORDS=10000;
declare -r MAX_FIELDS=12;
declare -r MAX_INPUT_LENGTH=40;
declare -r version="0.2";
declare -r nickname="Prototype_1";
declare -r netmon="1";
declare -r collector_interval_1=2;
declare -r collector_interval_2=4;
declare -r collector_interval_3=8;
### System Commands.
declare -r sys_rm="/bin/rm";
declare -r sys_sleep="/bin/sleep";
declare -r sys_stdout="echo -n";
declare -r sys_stdin="read -e -n $MAX_INPUT_LENGTH";
declare -r sys_getopt="/usr/bin/getopt";
declare -r sys_grep="/bin/grep";
declare -r sys_sort="/bin/sort";
### System Terminal Tools.
declare -r terminal_alloc="/usr/bin/tty";
declare -r term_init="/usr/bin/tput init";
declare -r term_reset="/usr/bin/tput reset";
declare -r term_clear="/usr/bin/tput clear";
declare -r term_lines="/usr/bin/tput cols";
### Text Attributes.
declare -r red="\\033[1;41m";
declare -r cyan="\\033[1;36m";
declare -r green="\\033[1;32m";
declare -r yellow="\\033[1;33m";
declare -r reset="\\033[0;39m";
### Set Shell options.
HISTFILE="$tmp_dir/$$.hist";
HISTFILESIZE=10;
HISTSIZE=10;
umask gu+rw; ### Set default file creation att.
set -P;      ### -P (no sym for cd++)
set -m;      ### monitor.
set +B;      ### No brace Expand.
set +h;      ### No Hash All.

# legal chars.
declare -r backspace=$'\b'
declare -r spinchars="|${backspace} \\${backspace} -${backspace} /${backspace}"
declare -ra legal_chars="( a b c d e f g h i j k l m \
                          n o p q r s t u v w x y z \
                          A B C D E F G H I J K L M \
                          N O P Q R S T U V W X Y Z \
                          0 1 2 3 4 5 6 7 8 9 . _ - \" \" )";

set -bm -o emacs;
shopt -s xpg_echo progcomp checkwinsize;
shopt -u interactive_comments extglob ;
shopt -u expand_aliases hostcomplete;
shopt -u promptvars sourcepath dotglob;
bind -r "\t" ### Temporary Binding.

### Runtime Variables.
declare -a record;
declare -a field;
data_type="";
type_id="";
edit_type="";
edit_id="";
pager=1;
runtime_debug=0
system_debug=0;
dbase_debug=0;
feature_debug=0;

### Not too happy about this.
declare -a user_text;

### Justify text.
# $1 - string $2 - max_length
function justify() {
  [ "$1" ] && [ "$2" ] || return 1;
  local length=${#1};
  spacer=""; 
  local padding=$length;
  while [ $padding -le $2 ]; do (( padding++ )); spacer="$spacer "; done;
  writeln "%d adding $padding spaces";
}

### Spin the wheel
function spinner() {
  local current_letter="";
  for current_letter in $spinchars; do
    echo -n ${spinchars}
  done
}

### Press a key...
function check_pager() {
   if [ "$pager" = "1" ]; then
     local current_limit=0;
     (( current_limit = ( LINES * pages ) - 2 )); 
     (( literal_line_count++ ));
     if [ "$literal_line_count" = "$current_limit" ]; then
       writeln "%d Forced Break: $break_now";
       [ $break_now = "0" ] && trap "break_now=\"1\"; trap \"\" 2; break;" 2;
       /bin/stty -icanon -echo;
       echo -n "-- More --"; read -n 1; echo -n "\r           \r";
       (( pages++ ));
       return 0;
    fi
  fi
}

### Text input/output Functions.
function writeln() {
  ### Internals. 
  local length=0;
  local flag="%u";
  local system_text="empty writeln call.";
  ### Check & Assign Variables.
  flag=${@/ */};
  system_text=${@/*$flag/};
  length=${#system_text};
  ### Get options, and start output.
  case "$flag" in
    ### Options passed to stdout.
    %h) $sys_stdout "${system_text}\n" >> $HISTFILE; history -r; ;;
    %u) $sys_stdout "${system_text}\n";                 check_pager;;
    %s) $sys_stdout "%netmon: ${system_text}\n";        check_pager;;
    %e) $sys_stdout "%netmon(error): ${system_text}\n"; check_pager;;
    %b) if [ "$dbase_debug" = "1"   ]; then $sys_stdout "%netmon(dBase_debug): ${system_text}\n";   check_pager; fi ;;
    %d) if [ "$system_debug" = "1"  ]; then $sys_stdout "%netmon(system_debug): ${system_text}\n";  check_pager; fi ;;
    %f) if [ "$feature_debug" = "1" ]; then $sys_stdout "%netmon(feature_debug): ${system_text}\n"; check_pager; fi ;;
    %r) if [ "$runtime_debug" = "1" ]; then $sys_stdout "%netmon(debug): ${system_text}\n";         check_pager; fi ;;
    *) writeln "%u ${flag} ${system_text}"; ;;
  esac
}

function valid() {
  [ "$1" ] && [ "$2" ] || return 1;
  writeln "%d $1 validation for '$2'";
  case "$1" in
   tnt) local loop=0;
        local second_loop=0;
        temp_user_text="${temp_user_text//\!*/remark}";
        temp_user_text="${temp_user_text//*\\**/all}";
        temp_user_text="${temp_user_text//*\\?*/help}";
        temp_user_text="${temp_user_text//*\\|*/pipe}";
        user_text=( $temp_user_text );
        while [ "${legal_chars[$loop]}" ]; do
          temp_user_text="${temp_user_text//${legal_chars[$loop]}/}";
          [ "$temp_user_text" ] || break;
          (( loop++ ));
        done
        [ "$temp_user_text" ] && user_text="";
        return 0; ;;
    ip) local loop=0;
        local four_octets=0;
        local -i tmp_value=0;
        local valid_range=1;
        local -a octet=();
        octet[0]="${2/.*/}";
        octet[1]="${2/${octet[0]}./}";                         octet[1]="${octet[1]/.*/}";
        octet[2]="${2/${octet[0]}.${octet[1]}./}";             octet[2]="${octet[2]/.*/}";
        octet[3]="${2/${octet[0]}.${octet[1]}.${octet[2]}./}"; octet[3]="${octet[3]/.*/}";
        [ "${octet[0]}" ] && [ "${octet[1]}" ] && 
        [ "${octet[2]}" ] && [ "${octet[3]}" ] && four_octets=1;
        if [ $four_octets = "1" ]; then
          while [ $loop -lt 4 ]; do
            tmp_value="${octet[$loop]}";
            (( tmp_value >= 255 )) && valid_range=0; 
            (( tmp_value < 0 )) && valid_range=0; 
            (( loop++ ));
          done
          [ "${octet[0]}.${octet[1]}.${octet[2]}.${octet[3]}" = "$2" ] && 
          [ $valid_range = "1" ] && return 0;
        fi ;;
   num) local tmp_value=$2;
        local valid_range=1;
        #local num_length=${#tmp_value};
        (( tmp_value >= 1024 )) && valid_range=0;
        (( tmp_value <= 0 )) && valid_range=0;
        [ $valid_range = "1" ] && return 0; ;;
     *) writeln "%e unknown validation request."; ;;
  esac
  return 1;
}

function readln() { 
  ### Restor TTY settings
  /bin/stty "$default_tty_settings";
  ### Check & Assign Variables. 
  local flag="%u";
  flag=${@/ */};
  ### Get options, and start output.
  case "$flag" in
    ### Options passed to stdout.
    %d) $sys_stdin -a user_text -p "[$USER@$nickname]% "; ;;
    %e) $sys_stdin -a user_text -p "[$USER@$nickname]# "; ;;
    %c) $sys_stdin -a user_text -p "[$USER@$nickname](config) "; ;;
    %f) $sys_stdin -a user_text -p "[$USER@$nickname](config_$edit_type $edit_id) "; ;;
     *) readln "%d $flag"; ;;
  esac
  local temp_user_text="${user_text[@]}";
  valid "tnt" "$temp_user_text";
}

### filesys functions.
function sync_fs() {
  sys_sync="/bin/sync";
  writeln "%d synchronizing filesystem.";
  $sys_sync || writeln "%e fs_sync failed.";
}

# Check if file Readable and writable;
function file() {
  local file=1;
  local action="$1";
  local filename="$2";
  if [ "$filename" ]; then
    if [ -e "$filename" ]; then writeln "%d file '$filename' exists";
      if [ -f "$filename" ]; then writeln "%d file '$filename' regular file";
        if [ -r "$filename" ]; then writeln "%d file '$filename' readable"; 
          if [ -w "$filename" ]; then writeln "%d file '$filename' writable";
            file=0;
          else writeln "%d file '$filename' write permission denied"; fi
        else writeln "%d file '$filename' read permission denied"; fi
      else writeln "%d file '$filename' not a regular file"; fi
    else writeln "%d file '$filename' does not exist"; fi
  else writeln "%d no filename specified"; fi
  case "$action" in
    exe) if [ "$file" = "0" ]; then
           if [ -x "$filename" ]; then
             writeln "%d file '$filename' executable";
           fi
         fi ;;
    chk) [ "$file" = "0" ] && writeln "%d file check ok."; ;;
    rec) if [ "$file" = "1" ]; then
           writeln "%d recreating file";
           echo -n > "$filename" || writeln "%d unable to recreate '$filename'."; 
           file="0";
         fi ;;
      *) ;;
  esac
  return $file;
}

function load_records() {
  function populate_record_table {
    local line=0;
    while read -r record[$line]; do
      writeln "%b rcd [$line]: ${record[$line]}";
      (( line++ ));
    done
  }
  record=();
  if file "rec" "$1"; then
    writeln "%b loading config file $1.";
    populate_record_table < $1;
    return 0;
  else
    writeln "%b filesystem error.";
    return 1;
  fi
}

function parse_record() {
  function raw_parse() { field=( $@ ); }
  function populate_field_table() {
    local item=1;
    local temp_item=1;
    ### Get record type.
    data_type=${field[0]/ */};
    type_id=(${field[0]/*$data_type /});
    case "$data_type" in
      # -[ Data Type Decleration ]----- -  -
      feature) writeln "%b data_type: feature";
               data_type="$type_id";
               type_id="${type_id[1]}"; ;;
    esac
  }
  if [ "$1" ]; then field=();
    if ! [ "${record[$1]}" ]; then
      writeln "%b [$1] end-of record table reached.";
      return 1;
    else
      local IFS=":";
      raw_parse "${record[$1]}";
      local IFS=" ";
      populate_field_table;
      return 0;
    fi
  else writeln "%e record number required."; fi
}

function record_exists() {
  [ "$1" ] || return 1;
  [ "$2" ] || return 1;
  local search_type="$1";
  local search_input="$2";
  rec_no=0;
  load_records "$config_dir/$1s";
  writeln "%b searching for $search_type $search_input.";
  while parse_record "$rec_no"; do
    ### Search.
    if [ "$data_type" = "$search_type" ]; then
      if [ "$type_id" = "$search_input" ]; then
        writeln "%b match found $search_input";
        return 0;
      fi
    fi
    (( rec_no++ ));
  done;
  return 1;
}

### Searches the Current field array.
function get_value() {
  [ "$1" ] || return 1;
  local search_type="$1";
  field_no=1;
  writeln "%b searching for field $search_type in $data_type $type_id.";
  while [ "${field[$field_no]}" ]; do
    current_type=${field[$field_no]/ */};
    current_data=(${field[$field_no]/*$current_type /});
    if [ "$current_type" = "$search_type" ]; then
      writeln "%b $current_type search found field:$field_no value:$current_data";
      return 0;
    else
      if [ "$current_data" = "$search_type" ]; then
        current_type=${current_data[0]};
        current_data[0]=${current_data[1]};
        local -a tmp_current_data="(${current_data[@]/*${current_data[0]} /})";
        writeln "%b data search found in field:$field_no value:${tmp_current_data}";
        return 0;
      fi
    fi
    [ $field_no = $MAX_FIELDS ] && break; # incase.
    (( field_no++ ));
  done;
  current_type="";
  current_data=();
  return 1;
}

# Nulled Output.
function authenticate() {
  local return_value=1;
  writeln "%d debug output suppressed";
  trap "" 2 20 
  /bin/stty -icanon -echo;
  record_exists "password" "enable" > /dev/null 2>&1
  get_value "unencrypted" > /dev/null 2>&1
  $sys_stdin -a user_text -p "Password: ";
  local temp_user_text="${user_text[@]}";
  valid "tnt" "$temp_user_text" > /dev/null 2>&1
  [ "$current_data" = "${user_text[0]}" ] && return_value=0;
  /bin/stty "$default_tty_settings";
  writeln;
  return $return_value;
}

### Delete a Record.
function reconfigure() {
  ### Delete Request Check.
  [ "$1" ] && [ "$2" ] && [ "$3" ] || return 1;
  ### Restrict Input.
  [ "$2" = "host" ] || [ "$2" = "group" ] || [ "$2" = "lock" ] || return 1;
  local reconfig_request="$1";
  local reconfig_type="$2";
  local reconfig_data="$3";
  local reconfig_field_type="$4";
  local reconfig_field_data="$5";
  local rec_no=0;
  local return_value=1;
  load_records "$config_dir/$2s";
  writeln "%b reconfigure $reconfig_type $reconfig_data.";
  case "$reconfig_request" in
    del) # Generate Config.
      while parse_record "$rec_no"; do
        if [ "$data_type" = "$reconfig_type" ]; then
          if [ "$type_id" = "$reconfig_data" ]; then
            writeln "%b bypassing record $rec_no.";
            echo -n >> "$tmp_dir/$2s.$$";
            return_value=0;
          else echo "${record[$rec_no]}" >> "$tmp_dir/$2s.$$"; fi
        else echo "${record[$rec_no]}" >> "$tmp_dir/$2s.$$"; fi
        (( rec_no++ ));
      done; ;;
    add) # Add/Append entry.
      if ! record_exists "$reconfig_type" "$reconfig_data"; then
        echo "$reconfig_type $reconfig_data" >> "$config_dir/$2s";
        writeln "%b adding $reconfig_type config.";
      else 
        if [ "$reconfig_field_type" ]; then
          if get_value "$reconfig_field_type"; then
            local tmp_rec="";
            local tmp_fld=1;
            while [ "${field[$tmp_fld]}" ]; do
              if [ "$tmp_fld" = "$field_no" ]; then 
                tmp_rec="$tmp_rec:$reconfig_field_type $reconfig_field_data";
              else tmp_rec="$tmp_rec:${field[$tmp_fld]}"; fi
              (( tmp_fld++ ));
            done;
            tmp_rec="$reconfig_type $reconfig_data$tmp_rec";
            reconfigure "del" "$reconfig_type" "$reconfig_data" &&
              echo "$tmp_rec" >> "$config_dir/$2s";
          else
            writeln "%b adding $reconfig_field_type $reconfig_field_data";
            reconfigure "del" "$reconfig_type" "$reconfig_data" &&
            echo "${record[$rec_no]}:$reconfig_field_type $reconfig_field_data" >> "$config_dir/$2s";
          fi
        else writeln "%b no change supplied."; fi 
      fi ;;
    *) writeln "%e unknown reconfiguration type."; ;;
  esac
  # Update Current Config if required.
  if [ "$return_value" = "0" ]; then
    if file "chk" "$tmp_dir/$2s.$$"; then
      writeln "%d moving regenerated configuration.";
      /bin/mv "$tmp_dir/$2s.$$" "$config_dir/$2s";
      writeln "%b reconfiguration complete.";
    else
      writeln "%b filesystem permissions error.";
      return_value=1;
    fi
  else
    if file "rec" "$config_dir/$2s"; then
      writeln "%d created empty config file.";
    else 
      writeln "%b filesystem error.";
      return_value=1;
    fi
  fi
  ### Cleanup
  file "chk" "$tmp_dir/$2s.$$" && $sys_rm "$tmp_dir/$2s.$$";
  return $return_value;
}

### 3 Locking Functions.
function lock() {
  [ "$1" ] || writeln "%e lock name required.";
  if record_exists "lock" "$1"; then
    writeln "%e $1 already locked";
    return 1;
  else
    if [ "$2" ]; then
      echo "lock $1:pid $$:$2" >> $config_dir/locks ||
        writeln "%e unable to lock $1.";
      echo -n > "$tmp_dir/$1" || writeln "%e unable to lock $1.";
    else
      echo "lock $1:pid $$" >> $config_dir/locks ||
        writeln "%e unable to lock $1.";
      echo -n > "$tmp_dir/$1" || writeln "%e unable to lock $1.";
    fi
    return 0;
  fi
}

function unlock() {
  [ "$1" ] || writeln "%e lock name required.";
  if reconfigure "del" "lock" "$1"; then 
    writeln "%d unlocked item $1.";
    $sys_rm "$tmp_dir/$1" || writeln "%d lock error.";
    return 0;
  else
    writeln "%d no lock found.";
    return 1;
  fi
}

function test_host() {
  [ "$1" ] || return 1;
  local host_rec_no=0;
  local current_host="$1"
  feature_return="-";
  if record_exists "host" "$current_host"; then
    if ! get_value "shutdown"; then
      if get_value "ipa"; then
        current_ipa="$current_data";
        source $ftr_dir/ns_lookup "$current_ipa";
        writeln "%d feature return value for $current_ipa [$feature_return]";
      else current_ipa="255.255.255.255"; feature_return="I"; fi
    else current_ipa="255.255.255.255"; writeln "%d $1 admin down"; feature_return="A"; fi
  else writeln "%d $1 non-existant bypassing."; feature_return="E"; fi
}

### Runtime Modes.
### Tracker(s) Checker.
function tracker() {
  lock "tracker" || exit 1;
  while [ -e "$tmp_dir/tracker" ]; do
    local -a start_time=(`/bin/date "+%s"`);
    local cycle_id="$start_time$RANDOM.trk";
    local sec_cycle_id="$start_time$RANDOM.grp";
    writeln "%r --+\040 cycle #[$cycle_id] start.";
    local group_rec_no=0;
    load_records "$config_dir/groups";
    while parse_record $group_rec_no; do
      local current_group="$type_id";
      if ! get_value "shutdown"; then
        if get_value "track"; then
          local current_tracker="$current_data"
          writeln "%d testing tracker $current_tracker";
          test_host "$current_tracker";
          ! [ "$feature_return" = "I" ] &&
            echo "group $current_group:host $current_tracker:ipa $current_ipa:feature_return $feature_return" >> "$run_dir/$cycle_id";
          if [ "$feature_return" = "0" ]; then
            writeln "%r \040 |- group $current_group tracker ok";
          else writeln "%r \040 |- group $current_group tracker down"; fi
        else feature_return="T"; writeln "%r \040 |- group $current_group no tracker defined"; fi
      else feature_return="A"; writeln "%r \040 |- group $current_group administrativly down"; fi
      echo "group $current_group:feature_return $feature_return" >> "$run_dir/$sec_cycle_id";
      load_records "$config_dir/groups";
      (( group_rec_no++ ));
      $sys_sleep $collector_interval_3;
    done
    local -a end_time=(`/bin/date "+%s"`);
    (( time_taken = $end_time - $start_time ));
    writeln "%r --+\040 cycle time $time_taken secs";
    record_exists "lock" "tracker" && reconfigure "add" "lock" "tracker" "cycle_time" "$time_taken";
    file "chk" "$run_dir/$cycle_id" && /bin/ln -sf "$run_dir/$cycle_id" "$run_dir/trackers";
    file "chk" "$run_dir/$sec_cycle_id" && /bin/ln -sf "$run_dir/$sec_cycle_id" "$run_dir/groups";
    writeln "%r";
  done;
  writeln "%s tracker terminated.";
  exit 0;
}

function collector() {
  lock "collector" || exit 1;
  while [ -e "$tmp_dir/collector" ]; do
    local -a start_time=(`/bin/date "+%s"`);
    local cycle_id="$start_time$RANDOM.hst";
    writeln "%r --+\040 cycle #[$cycle_id] start.";
    local host_rec_no=0;
    load_records "$config_dir/hosts";
    while parse_record $host_rec_no; do
      if [ "$data_type" = "host" ]; then
        current_host="$type_id";
        test_host "$type_id";
        echo "host $current_host:ipa $current_ipa:feature_return $feature_return" >> "$run_dir/$cycle_id";
        writeln "%r \040 |__ $feature_return $current_host $current_ipa";
        $sys_sleep $collector_interval_1;
      else $sys_sleep $collector_interval_2; fi
      (( host_rec_no++ ));
    done
    $sys_sleep $collector_interval_3;
    local -a end_time=(`/bin/date "+%s"`);
    (( time_taken = $end_time - $start_time ));
    writeln "%r --+\040 cycle time $time_taken secs";
    record_exists "lock" "collector" && reconfigure "add" "lock" "collector" "cycle_time" "$time_taken";
    file "chk" "$run_dir/$cycle_id" && /bin/ln -sf "$run_dir/$cycle_id" "$run_dir/hosts";
    writeln "%r";
  done;
  writeln "%s collector terminated.";
  exit 0;
}

### Interactive Mode.
function session() {
  local enable_mode=0;
  local config_mode=0;
  local field_config_mode=0;
  local rec_no=0;

  function start_session() {
    ### Check for .
    if ! record_exists "lock" "temporary"; then
      writeln "%e temporary lock_hack not found.";
      exit 1;
    fi
    ### Get terminal Settings.
    default_tty_settings=$(/bin/stty -g);
    ### Check for user.
    [ "$USER" ] || USER="$LOGNAME";
    lock "session_$$" "user $USER:terminal $($terminal_alloc)" || exit 1;
    writeln "%d starting netmon session.";
    ### Check for IP.
    [ "$REMOTEHOST" ] || REMOTEHOST="local";
    ### Start History Logging...
    [ -e "$HISTFILE" ] && $sys_rm "$HISTFILE";
    writeln "%h ! Hello from Omar...";
    set -o history;
  }

  function generate_compreply() {
  if ! [ "$1" ]; then
    writeln "%e cannot generate empty comspec.";
  fi
  case "$1" in
    show) COMPREPLY=( config env system ); ;;
    *) writeln "%e undefined command comspec."; ;;
  esac
  }

  function highlight_error() {
    if [ "$1" ]; then 
      local tmp_loop="0";
      local -a iderr_str;
      while [ "${user_text[$tmp_loop]}" ]; do
        if [ $tmp_loop = $cmd_pos ]; then
          iderr_str[$tmp_loop]="'${user_text[$tmp_loop]}'";
        else
          iderr_str[$tmp_loop]="${user_text[$tmp_loop]}";
        fi
        (( tmp_loop++ ));
      done
      user_text="${iderr_str[@]}";
      writeln "%e $1 $user_text";
    else writeln "%e file name required.";
    fi
  }

  function cmd_exec() {
    if file "chk" "$1"; then
      [ "$first_globbed_cmd_filename" ] &&
        writeln "%d globbed command '$first_globbed_cmd_filename'." &&
          first_globbed_cmd_filename="";
      ### Last Min Strip+Check.
      local cmd="${1##/*/}";
      if ! source "$cmd_dir/$cmd"; then
        highlight_error "syntax error";
        break;
      fi
      return 0;
    else
      if [ $glob_switch -eq 0 ]; then
        local -a globbed_cmd=(`$sys_stdout $1*`);
        local first_globbed_cmd=${globbed_cmd/ */};
        local first_globbed_cmd_filename=${first_globbed_cmd##/*/};
        local last_globbed_cmd=${globbed_cmd/$first_globbed_cmd* /};
        glob_switch=1;
        if cmd_exec "$first_globbed_cmd"; then
          complete -F generate_compreply "$first_globbed_cmd_filename";
          return 0;
        else
          highlight_error "unknown command";
          return 1;
        fi
      fi
      return 1;
    fi
  }

  function mode_readln() {
    trap "break_now=1;" 2;
    if [ "$enable_mode" = "0" ]; then 
      readln "%d";
    else
      if [ "$config_mode" = "1" ]; then 
        if [ "$field_config_mode" = "1" ]; then readln "%f";
        else readln "%c"; fi
      else readln "%e"; fi
    fi
    ### Append History file.
    [ $break_now = 1 ] && break_now=0 && user_text[0]="remark";
    local agg_hist="${user_text[@]}";
    writeln "%h $agg_hist";
  }

  start_session;
  #while record_exists "lock" "session_$$"; do
  while [ -e "$tmp_dir/session_$$" ]; do
    local negate=0;
    local write=0;
    local debug=0;
    local cmd_pos=0;
    local next_cmd_pos=0;
    local show=0;
    local config=0;
    local break_now=0;
    local pages=1;
    local literal_line_count=0;
    ## Some Bindings.
    mode_readln;
    while [ "${user_text[$cmd_pos]}" ]; do
      trap "break;" 2; # CTRL^C
      trap "" 20;      # CTRL^Z
      local glob_switch=0;
      (( next_cmd_pos++ ));
      cmd_exec "$cmd_dir/${user_text[$cmd_pos]}" || break;
      (( cmd_pos++ ));
    done
    trap "" 2; # ReTrap 
    trap "echo; cmd_exec $cmd_dir/exit;" 20;
  done
  exit 1;
}

###
### Main Functions.
function parse_cmdln_parameters() {
  ### Parse options using getopt.
  local user_input=`$sys_getopt \
                    -o dbscCDthT \
                    --long tracker,dbase,system,help,debug,daemon,data_collector,terminate: \
                    -n 'netmon(alert)' -- "$@"`;
  ### Alien Object.
  if [ $? != 0 ] ; then 
    writeln "'%e Terminating..." >&2 ; 
    exit 1 ; 
  fi
  ### Get PIDz if exist.
  if record_exists "lock" "collector"; then
    get_value "pid";
    collector_pid=$current_data;
  fi
  if record_exists "lock" "tracker"; then
    get_value "pid";
    tracker_pid=$current_data;
  fi
  ### Parameter Calls.
  eval set -- "$user_input"
  while true ; do
    case "$1" in
  ## ------------------------ PLEASE EXCUSE UNDER DEVELOPMENT --------------------------- ##
   ## ---------------------------------------------------------------------------------- ##
               -d|--debug) runtime_debug=1; shift;;
              -s|--system) system_debug=1; shift;;
               -b|--dbase) dbase_debug=1; shift;; 
      -c|--data_collector) collector; shift;;
             -t|--tracker) tracker; shift;;
              -D|--daemon) [ "$runtime_debug" = "1" ] && 
                             writeln "%e cannot debug in background mode, use -dtc." &&
                               exit 1;
                           [ "$system_debug" = "1" ] &&
                             writeln "%e cannot debug in background mode, use -stc." &&
                               exit 1; 
                           [ "$dbase_debug" = "1" ] &&
                             writeln "%e cannot debug in background mode, use -btc." &&
                               exit 1;
                           # tracker
                           ( $0 --tracker > /dev/null 2>&1 ) &
                           if ! [ "$tracker_pid" ]; then
                             tracker_pid=$!;
                             writeln "%s starting tracker [$tracker_pid]."; 
                           else writeln "%e tracker already started [$tracker_pid]."; fi 
                           # collector
                           ( $0 --data_collector > /dev/null 2>&1 ) &
                           if ! [ "$collector_pid" ]; then
                             collector_pid=$!;
                             writeln "%s starting collector [$collector_pid].";
                             exit 0;
                           else writeln "%e collector already started [$collector_pid].";
                             exit 1;
                           fi ;;
           -T|--terminate) if unlock "collector"; then
                             writeln "%s collector terminated [$collector_pid].";
                           else writeln "%e collector not running."; fi 
                           if unlock "tracker"; then
                             writeln "%s tracker terminated [$tracker_pid]."; exit 0;
                           else writeln "%e tracker not running."; exit 1; fi ;;
                -h|--help) writeln "netmon(usage) netmon -[dctSDht]" & exit 0; ;;
                       --) shift; break;;
                        *) writeln "%e internal error!" ; exit 1;;
   ## ---------------------------------------------------------------------------------- ##               
  ## ------------------------ PLEASE EXCUSE UNDER DEVELOPMENT --------------------------- ##
    esac
  done
  local param_rem="";
  for param_rem do 
    writeln '%d parameters --> '"\`$param_rem'" ; 
  done
  session $param_rem;
  exit 0;
}

###
### Let the magic Begin.
  trap "cmd_exec $cmd_dir/exit;" 20; # C-z
  trap "" 2 3 4 6 8 9 13 15 17;      # other.
  parse_cmdln_parameters $@;
### End.
###
