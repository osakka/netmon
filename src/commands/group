### Group.

### Delete a Group .
if [ "$negate" = "1" ]; then
  if [ "$config_mode" = "1" ]; then
    if [ "$field_config_mode" = "0" ]; then
      [ "${user_text[$next_cmd_pos]}" ] || return 1;
      if [ "${user_text[$next_cmd_pos]}" = "1" ]; then
        writeln "%e cannot delete default group";
        break;
      else
        reconfigure "del" "group" "${user_text[$next_cmd_pos]}";
        break;
      fi
    fi
  fi
else
### [RE]-Configure a group.
  if [ "$field_config_mode" = "1" ]; then
    if [ "$edit_type" = "host" ]; then
      [ "${user_text[$next_cmd_pos]}" ] || return 1;
      reconfigure "add" "$edit_type" "$edit_id" "group" "${user_text[$next_cmd_pos]}";
      break;
    fi
  else
    if [ "$config_mode" = "1" ]; then
      [ "${user_text[$next_cmd_pos]}" ] || return 1;
      if record_exists "group" "${user_text[$next_cmd_pos]}"; then
        writeln "%d editing group '${user_text[$next_cmd_pos]}'.";
      else
        if reconfigure "add" "group" "${user_text[$next_cmd_pos]}"; then
          writeln "%d new group added.";
        fi
      fi
      field_config_mode=1;
      edit_type="group";
      edit_id="${user_text[$next_cmd_pos]}";
      break;
    fi
  fi
fi

### Display Config.
if [ $show -eq 1 ]; then
  if [ $config -eq 1 ]; then
    local line_count=0;
    load_records "$config_dir/groups";
    local rec_id=0;

    ### Generic Header.
    writeln "Realtime Config...\n";
    writeln "! netmon v$version configuration";
    writeln "! config_file: $config_dir/groups";
    writeln "! device_name: $nickname";
    writeln "! displaying groups configured";
    writeln;

    ### Parse Record(s), and display according to $1.
    while parse_record $rec_id; do
      writeln "%d record index $rec_id.";
      local item=1;
      local temp_item=1;
        ### Type of Show Selection.
        if [ "$data_type" = "group" ]; then
          writeln "$data_type $type_id";
          while true; do
            if [ "${field[$item]}" ]; then
              writeln "\040${field[$item]}";
              field[$temp_item]=${field[$item]};
              (( temp_item++ ));
            fi
            [ $item = $MAX_FIELDS ] && break;
            (( item++ ));
          done;
          writeln "!";
          (( line_count++ ));
        fi
      ### End Of Display.
      (( rec_id++ ));
    done;
    writeln "! total \"$line_count\" group(s)";
    return 0;
  else
    local rec_id=0;
    ### Show Current Status.
    writeln "%u Displaying Status...\n\n\040GROUP\tSTATUS";
    writeln "%u \040----------------------------";
      load_records "$run_dir/groups";
      while parse_record $rec_id; do
        writeln "%d record index $rec_id.";
        local item=1;
        ### Type of Show Selection.
        echo -n " $type_id\t";
        while [ "${field[$item]}" ]; do
          field_type=${field[$item]/ */};
          field_data=(${field[$item]/*$field_type /});
          if [ "$field_type" = "feature_return" ]; then
            [ "$field_data" = "0" ] && field_data="Tracker up";
            [ "$field_data" = "1" ] && field_data="Tracker down";
            [ "$field_data" = "A" ] && field_data="Administrativly down";
            [ "$field_data" = "T" ] && field_data="Tracker undefined";
            [ "$field_data" = "I" ] && field_data="IPA undefined";
            [ "$field_data" = "E" ] && field_data="Tracker invalid";
          fi
          justify "$field_data" "22";
          echo -n "$field_data $spacer";
          [ $item = $MAX_FIELDS ] && break;
          (( item++ ));
        done;
        writeln;
        ### End Of Display.
        (( rec_id++ ));
      done;
      writeln "%u \040------------------- --- -- -";
      writeln "\040total \"$rec_id\" group(s)";
    return 0;
  fi
fi

return 1;
